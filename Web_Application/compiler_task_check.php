<?php require './module/session_required.php'; ?>

<?php

$user_code_dir = "user_code_dir";

// Function to write contents in file
function write_to_file($write_filename, $file_text) {
    $new_file_obj = fopen($write_filename, "w");
    fwrite($new_file_obj, $file_text);
    fclose($new_file_obj);
}

// Function to read contents from file
function read_from_file($read_filename) {
    $new_file_obj = fopen($read_filename, "r");
    $output = "";
    while (!feof($new_file_obj)) {
        $output = $output . fgets($new_file_obj) . "<br>";
    }
//$output = substr($output, 0, strlen($output) - 8);
    fclose($new_file_obj);
    return $output;
}

// Function to remove the first line from the output file that is 
// generated by sandbox
function delete_first_line($filename) {
    $file = fopen($filename, "r");
    $cnt = 0;
    $output = "";
    while (!feof($file)) {
        $line = fgets($file);
        if ($cnt != 0)
            $output = $output . $line;
        $cnt++;
    }
    fclose($file);
    write_to_file($filename, $output);
}

// Getting user code and input from compiler
$user_code_text = $_POST["data"];
$user_input_text = $_POST["user_input"];
$btn_val = $_POST["btn_val"];
$task_input_file = $_POST["task_input_file"];
$task_output_file = $_POST["task_output_file"];
$task_id = $_POST["task_id"];
$task_username = $_POST["task_username"];
$task_category = $_POST["task_category"];
$task_title = $_POST ["task_title"];





$submission_task_id = $task_id;
$submission_task_title = $task_title;
$submission_task_category = $task_category;
$submission_username = $task_username;
$submission_verdict = '';
$submission_code = htmlspecialchars($_POST["data"]);
$submission_date = '' . time() . '';


// Writing user code in a file
$user_code_filename = $user_code_dir . "/" . $task_username . "_" . $task_id . ".c";
write_to_file($user_code_filename, $user_code_text);


// Writing user input in a file
//$user_input_filename = "a.in";
$user_input_filename = $user_code_dir . "/" . $task_username . "_" . $task_id . ".in";
write_to_file($user_input_filename, $user_input_text);
$user_input_filename_fix = $user_input_filename;

// Setting user output filename
//$user_output_filename = "a.out";
$user_output_filename = $user_code_dir . "/" . $task_username . "_" . $task_id . ".out";

// Setting user exec filename
$user_exec_name = $user_code_dir . "/" . $task_username . "_" . $task_id;

// Setting judge input output filename
$judge_output_filename = $task_output_file;
$judge_input_filename = $task_input_file;

// Setting user input filename as judge input if no custom data is given

if ($user_input_text == "") {
    $user_input_filename = $judge_input_filename;
}


// Setting user shell filename
//$user_shell_filename = "LD_PRELOAD=sand/EasySandbox.so ./a.out  --> run_a_out.sh";
$user_shell_filename = $user_code_dir . "/" . $task_username . "_" . $task_id . "_runner.c";
$user_shell_exec_name = $user_code_dir . "/" . $task_username . "_" . $task_id . "_runner";
$user_shell_text = '';
$user_shell_text = $user_shell_text . '#include<stdio.h>' . "\n";
$user_shell_text = $user_shell_text . 'int main(){' . "\n";
$user_shell_text = $user_shell_text . 'system("LD_PRELOAD=user_code_dir/sand/EasySandbox.so ./' . $user_exec_name . ' < ' . $user_input_filename . '");' . "\n";
$user_shell_text = $user_shell_text . 'return 0;' . "\n";
$user_shell_text = $user_shell_text . '}' . "\n";
write_to_file($user_shell_filename, $user_shell_text);


// Run button press action starts
if ($btn_val == "run_btn") {
    $cmd = "gcc -o $user_exec_name $user_code_filename 2>&1";
    exec($cmd, $compile_message, $error_message);
// If there is no compilation error in the program
    if ($error_message == 0) {
        $cmd_runner = "gcc -o $user_shell_exec_name $user_shell_filename 2>&1";
        exec($cmd_runner, $compile_message_runner, $error_message_runner);

        $cmd_new = "timeout 1.0s ./$user_shell_exec_name > $user_output_filename";
        exec($cmd_new, $output_new);


        $output_file_size = filesize($user_output_filename);
        $file_limit = 700 * 1024;
        if ($output_file_size < $file_limit) {
            delete_first_line($user_output_filename);
            $output_success_message = "";
            $user_input = read_from_file($user_input_filename);
            $output_success_message = $output_success_message . '<h2 class="title">Input</h2>';
            $output_success_message = $output_success_message . '<div class="alert well">';
            $output_success_message = $output_success_message . $user_input;
            $output_success_message = $output_success_message . "</div>";

            $user_output = read_from_file($user_output_filename);
            $output_success_message = $output_success_message . '<h2 class="title">Your output</h2>';
            $output_success_message = $output_success_message . '<div class="alert well">';
            $output_success_message = $output_success_message . $user_output;
            $output_success_message = $output_success_message . "</div>";

            echo $output_success_message;
        } else {
            $output_error_message = "";
            $output_error_message = $output_error_message . '<div class="alert alert-danger">';
            $output_error_message = $output_error_message . '<h4 class="compilation_error_header">Compilation Error!</h4>';
            $output_error_message = $output_error_message . "</div>";
            $output_error_message = $output_error_message . '<h2 class="title">Errors</h2>';
            $output_error_message = $output_error_message . '<div class="well">';
            $output_error_message = $output_error_message . 'Infinite loop should be handled';
            $output_error_message = $output_error_message . "</div>";
            echo $output_error_message;
        }
    }

// If compilation error is found
    else {
        $output_error_message = "";
        $output_error_message = $output_error_message . '<div class="alert alert-danger">';
        $output_error_message = $output_error_message . '<h4 class="compilation_error_header">Compilation Error!</h4>';
        $output_error_message = $output_error_message . "</div>";
        $output_error_message = $output_error_message . '<h2 class="title">Errors</h2>';
        $output_error_message = $output_error_message . '<div class="well">';
        foreach ($compile_message as $line) {
            if ($line == "")
                continue;
            $find_str = $user_code_filename . ":";
            $find_str_len = strlen($find_str);
            $file_name_start = strpos($line, $find_str);
            if ($file_name_start != FALSE) {
                $str_pos = $file_name_start + $find_str_len;
                $line = substr($line, $str_pos);
            }
            $line = '<i class="glyphicon glyphicon-exclamation-sign"></i> ' . $line;
            $output_error_message = $output_error_message . $line . "<br>";
        }
        $output_error_message = $output_error_message . "</div>";
        echo $output_error_message;
    }
}
// Run button press action ends
// Submit button press action starts
else if ($btn_val == "submit_btn") {

    $ranklist_user_details_ar = $user_ranklist_object->get_all_row_user($task_username);
    $ranklist_user_details = $ranklist_user_details_ar[0];
    $ranklist_username = $ranklist_user_details["ranklist_username"];
    $number_of_ac = $ranklist_user_details["number_of_ac"];
    $number_of_submissions = $ranklist_user_details["number_of_submissions"];
    $date_of_last_submission = '' . time() . '';
    $check_prev_ac = count($user_task_object->get_number_of_accepted_solution_of_a_task_of_user($ranklist_username, $submission_task_id));
    $number_of_submissions = $number_of_submissions + 1;

    $cmd = "gcc -o $user_exec_name $user_code_filename 2>&1";
    exec($cmd, $compile_message, $error_message);

// If there is no compilation error is found
    if ($error_message == 0) {
//        $cmd = "./$user_exec_name < $judge_input_filename > $user_output_filename";
//        exec($cmd, $output);

        $cmd_runner = "gcc -o $user_shell_exec_name $user_shell_filename 2>&1";
        exec($cmd_runner, $compile_message_runner, $error_message_runner);

        $cmd_new = "timeout 1.0s ./$user_shell_exec_name > $user_output_filename";
        exec($cmd_new, $output_new);


        $output_file_size = filesize($user_output_filename);
        $file_limit = 700 * 1024;
        if ($output_file_size < $file_limit) {
            delete_first_line($user_output_filename);


            $diff_cmd = "diff $user_output_filename $judge_output_filename";
            exec($diff_cmd, $output);
// If judge output and user output are same
            if (count($output) == 0) {
                $output_success_message = "";

                $output_success_message = $output_success_message . '<div class="alert alert-success">';
                $output_success_message = $output_success_message . '<h4 class="accepted_header">Accepted</h4>';
                $output_success_message = $output_success_message . "</div>";

                $judge_input = read_from_file($judge_input_filename);
                $output_success_message = $output_success_message . '<h2 class="title">Input</h2>';
                $output_success_message = $output_success_message . '<div class="alert well">';
                $output_success_message = $output_success_message . $judge_input;
                $output_success_message = $output_success_message . "</div>";

                $user_output = read_from_file($user_output_filename);
                $output_success_message = $output_success_message . '<h2 class="title">Your output</h2>';
                $output_success_message = $output_success_message . '<div class="alert well">';
                $output_success_message = $output_success_message . $user_output;
                $output_success_message = $output_success_message . "</div>";

                echo $output_success_message;
                $submission_verdict = 'Accepted';
                if ($check_prev_ac == 0) {
                    $number_of_ac = $number_of_ac + 1;
                }
            }
// If judge solution and user solution are different
            else {
                $output_error_message = "";

                $output_error_message = $output_error_message . '<div class="alert alert-danger">';
                $output_error_message = $output_error_message . '<h4 class="wrong_answer_header">Wrong answer</h4>';
                $output_error_message = $output_error_message . "</div>";


                $judge_input = read_from_file($judge_input_filename);
                $output_error_message = $output_error_message . '<h2 class="title">Input</h2>';
                $output_error_message = $output_error_message . '<div class="alert well">';
                $output_error_message = $output_error_message . $judge_input;
                $output_error_message = $output_error_message . "</div>";

                $user_output = read_from_file($user_output_filename);
                $output_error_message = $output_error_message . '<h2 class="title">Your output</h2>';
                $output_error_message = $output_error_message . '<div class="alert well">';
                $output_error_message = $output_error_message . $user_output;
                $output_error_message = $output_error_message . "</div>";

                $judge_output = read_from_file($judge_output_filename);
                $output_error_message = $output_error_message . '<h2 class="title">Expected output</h2>';
                $output_error_message = $output_error_message . '<div class="alert well">';
                $output_error_message = $output_error_message . $judge_output;
                $output_error_message = $output_error_message . "</div>";
                echo $output_error_message;
                $submission_verdict = 'Wrong answer';
            }
        } else {
            $output_error_message = "";
            $output_error_message = $output_error_message . '<div class="alert alert-danger">';
            $output_error_message = $output_error_message . '<h4 class="compilation_error_header">Compilation Error!</h4>';
            $output_error_message = $output_error_message . "</div>";
            $output_error_message = $output_error_message . '<h2 class="title">Errors</h2>';
            $output_error_message = $output_error_message . '<div class="well">';
            $output_error_message = $output_error_message . 'Infinite loop should be handled';
            $output_error_message = $output_error_message . "</div>";
            echo $output_error_message;
            $submission_verdict = 'Compilation error';
        }
    }




// If compilation error is found
    else {
        $output_error_message = "";
        $output_error_message = $output_error_message . '<div class="alert alert-danger">';
        $output_error_message = $output_error_message . '<h4 class="compilation_error_header">Compilation Error!</h4>';
        $output_error_message = $output_error_message . "</div>";
        $output_error_message = $output_error_message . '<h2 class="title">Errors</h2>';
        $output_error_message = $output_error_message . '<div class="well">';
        foreach ($compile_message as $line) {
            if ($line == "")
                continue;
            $find_str = $user_code_filename . ":";
            $find_str_len = strlen($find_str);
            $file_name_start = strpos($line, $find_str);
            if ($file_name_start != FALSE) {
                $str_pos = $file_name_start + $find_str_len;
                $line = substr($line, $str_pos);
            }
            $line = '<i class="glyphicon glyphicon-exclamation-sign"></i> ' . $line;
            $output_error_message = $output_error_message . $line . "<br>";
        }
        $output_error_message = $output_error_message . "</div>";
        echo $output_error_message;
        $submission_verdict = 'Compilation error';
    }


    $submission_data = array();
    $submission_data["submission_task_id"] = $submission_task_id;
    $submission_data["submission_task_title"] = $submission_task_title;
    $submission_data["submission_task_category"] = $submission_task_category;
    $submission_data["submission_username"] = $submission_username;
    $submission_data["submission_verdict"] = $submission_verdict;
    $submission_data["submission_code"] = $submission_code;
    $submission_data["submission_date"] = $submission_date;
    $ret_val_submission = $user_task_object->add_row($submission_data);

    $data_ranklist = array();
    $data_ranklist['ranklist_username'] = $ranklist_username;
    $data_ranklist['number_of_ac'] = $number_of_ac;
    $data_ranklist['number_of_submissions'] = $number_of_submissions;
    $data_ranklist['date_of_last_submission'] = $date_of_last_submission;

    $ret_val_ranklist = $user_ranklist_object->update_row($data_ranklist);
}
// Submit button press action ends


unlink($user_code_filename);
unlink($user_input_filename_fix);
unlink($user_output_filename);
unlink($user_exec_name);
unlink($user_shell_filename);
unlink($user_shell_exec_name);
?>